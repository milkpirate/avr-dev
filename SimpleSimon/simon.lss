
simon.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002d6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002d6  0000034a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005c  00000000  00000000  0000036e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000004ab  00000000  00000000  000003ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001ba  00000000  00000000  00000875  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000397  00000000  00000000  00000a2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000dc8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000014e  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002bc  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ed       	ldi	r30, 0xD6	; 214
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  7a:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <GenerateTone>:
}

void GenerateTone(uint8_t SeqByte)
{
	// Translates the bit shift back into decimal:
	if      (SeqByte == _BV(0))  SeqByte = 0;
  82:	81 30       	cpi	r24, 0x01	; 1
  84:	11 f4       	brne	.+4      	; 0x8a <GenerateTone+0x8>
  86:	e0 e0       	ldi	r30, 0x00	; 0
  88:	09 c0       	rjmp	.+18     	; 0x9c <GenerateTone+0x1a>
	else if (SeqByte == _BV(1))  SeqByte = 1;
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	11 f4       	brne	.+4      	; 0x92 <GenerateTone+0x10>
  8e:	e1 e0       	ldi	r30, 0x01	; 1
  90:	05 c0       	rjmp	.+10     	; 0x9c <GenerateTone+0x1a>
	else if (SeqByte == _BV(2))  SeqByte = 2;
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	11 f0       	breq	.+4      	; 0x9a <GenerateTone+0x18>
  96:	e3 e0       	ldi	r30, 0x03	; 3
  98:	01 c0       	rjmp	.+2      	; 0x9c <GenerateTone+0x1a>
  9a:	e2 e0       	ldi	r30, 0x02	; 2
	else                         SeqByte = 3;

	TCNT1 = 0;                  // Reset the timer value register
  9c:	1d bc       	out	0x2d, r1	; 45
  9e:	1c bc       	out	0x2c, r1	; 44
	OCR1A = PWMValues[SeqByte]; // Set the compare register to the translated value
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	e0 5a       	subi	r30, 0xA0	; 160
  a4:	ff 4f       	sbci	r31, 0xFF	; 255
  a6:	80 81       	ld	r24, Z
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	9b bd       	out	0x2b, r25	; 43
  ac:	8a bd       	out	0x2a, r24	; 42
	SoundOn();                  // Turn on timer 1 to start the sound generation
  ae:	8e b5       	in	r24, 0x2e	; 46
  b0:	81 60       	ori	r24, 0x01	; 1
  b2:	8e bd       	out	0x2e, r24	; 46
}
  b4:	08 95       	ret

000000b6 <CreateTimerRand>:

uint8_t CreateTimerRand(void)
{
	uint8_t RVal = TCNT0;   // Get the timer0 value into a variable
  b6:	82 b7       	in	r24, 0x32	; 50

	// Priority encoder: Uses ordered tests to save code so that only
	// the first matching test code is executed.
	if      (RVal <= 64)  RVal = _BV(0);
  b8:	81 34       	cpi	r24, 0x41	; 65
  ba:	10 f4       	brcc	.+4      	; 0xc0 <CreateTimerRand+0xa>
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	08 95       	ret
	else if (RVal <= 128) RVal = _BV(1);
  c0:	81 38       	cpi	r24, 0x81	; 129
  c2:	10 f4       	brcc	.+4      	; 0xc8 <CreateTimerRand+0x12>
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	08 95       	ret
	else if (RVal <= 192) RVal = _BV(2);
  c8:	81 3c       	cpi	r24, 0xC1	; 193
  ca:	10 f0       	brcs	.+4      	; 0xd0 <CreateTimerRand+0x1a>
  cc:	88 e0       	ldi	r24, 0x08	; 8
  ce:	08 95       	ret
  d0:	84 e0       	ldi	r24, 0x04	; 4
	else                  RVal = _BV(3);

	return RVal;            // Shift 1 by the new random number between 0 and 3, return the new sequence byte
}
  d2:	08 95       	ret

000000d4 <main>:
// TONE TABLE
uint8_t PWMValues[] = {100, 115, 130, 145};   // Lookup table for the tone compare values: (1000000 / x) = Resulting frequency

// PROGRAM ROUTINES
int main(void)
{
  d4:	a4 e1       	ldi	r26, 0x14	; 20
  d6:	b0 e0       	ldi	r27, 0x00	; 0
  d8:	e0 e7       	ldi	r30, 0x70	; 112
  da:	f0 e0       	ldi	r31, 0x00	; 0
  dc:	0c 94 53 01 	jmp	0x2a6	; 0x2a6 <__prologue_saves__+0xc>
	uint8_t CurrentState              = STATE_Setup;
	uint8_t SequenceBuffer[BUFFERLEN] = {};
  e0:	fe 01       	movw	r30, r28
  e2:	31 96       	adiw	r30, 0x01	; 1
  e4:	84 e1       	ldi	r24, 0x14	; 20
  e6:	df 01       	movw	r26, r30
  e8:	1d 92       	st	X+, r1
  ea:	8a 95       	dec	r24
  ec:	e9 f7       	brne	.-6      	; 0xe8 <main+0x14>
	uint8_t CurrSeqPosC               = 0;
	uint8_t CurrentLevel              = 0;

	SPEAKERddr   = OUTPUTS;       // SPEAKER port set as outputs
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	81 bb       	out	0x11, r24	; 17
	LEDddr       = OUTPUTS;       // LED port set as outputs
  f2:	84 bb       	out	0x14, r24	; 20
	BUTTONddr    = INPUTS;        // BUTTON port set as inputs
  f4:	1a ba       	out	0x1a, r1	; 26

	SPEAKERport  = 0x00;          // Speaker off initially
  f6:	12 ba       	out	0x12, r1	; 18
	LEDport      = 0xFF;          // All LEDs off initially
  f8:	85 bb       	out	0x15, r24	; 21
	BUTTONport   = PULLUPS;       // Enable pullups on the BUTTON port
  fa:	8b bb       	out	0x1b, r24	; 27

	TCCR1A       = _BV(COM1A0);   // Toggle timer1 output on match
  fc:	80 e4       	ldi	r24, 0x40	; 64
  fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B       = _BV(WGM12);    // Clear timer on compare mode
 100:	88 e0       	ldi	r24, 0x08	; 8
 102:	8e bd       	out	0x2e, r24	; 46

	Timer0On();                   // Turn on the timer 0, to run at 1MHz (clock). This is used to determine the
 104:	83 b7       	in	r24, 0x33	; 51
 106:	81 60       	ori	r24, 0x01	; 1
 108:	83 bf       	out	0x33, r24	; 51
 10a:	dd 24       	eor	r13, r13
 10c:	00 e0       	ldi	r16, 0x00	; 0
 10e:	cc 24       	eor	r12, r12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	24 ec       	ldi	r18, 0xC4	; 196
 112:	e2 2e       	mov	r14, r18
 114:	29 e0       	ldi	r18, 0x09	; 9
 116:	f2 2e       	mov	r15, r18
				LEDport |= (PressedButton  | 0xF0);                  // Turn off the pressed button's LED
				Delay10MS(20);                                       // Wait 200ms

				SoundOff();

				if (PressedButton == SequenceBuffer[CurrSeqPosC])    // Correct button pressed
 118:	5f 01       	movw	r10, r30
		{
			case STATE_Setup:
				CurrentLevel = 1;          // Reset current level variable
				CurrSeqPosC  = 0;          // Reset current sequence position variable

				LEDport      = 0xF0;       // All LEDs on
 11a:	90 ef       	ldi	r25, 0xF0	; 240
 11c:	99 2e       	mov	r9, r25

				while (!(GetButton())) {}  // Wait until a button is pressed, store pressed button

				LEDport      = 0xFF;       // All LEDs off
 11e:	88 24       	eor	r8, r8
 120:	8a 94       	dec	r8
 122:	05 c0       	rjmp	.+10     	; 0x12e <main+0x5a>

				SequenceBuffer[0] = CreateTimerRand(); // Create a random sequence byte from the timer value for the first sequence
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	00 e0       	ldi	r16, 0x00	; 0
 128:	cc 24       	eor	r12, r12
 12a:	c3 94       	inc	r12
 12c:	1d c0       	rjmp	.+58     	; 0x168 <main+0x94>
	                              // Random sequence bytes; it's value is read after the last sequence byte is
	                              // entered by the user.

	while (1)                     // Infinite Loop
	{
		switch (CurrentState)
 12e:	b2 e0       	ldi	r27, 0x02	; 2
 130:	db 16       	cp	r13, r27
 132:	09 f4       	brne	.+2      	; 0x136 <main+0x62>
 134:	42 c0       	rjmp	.+132    	; 0x1ba <main+0xe6>
 136:	dd 20       	and	r13, r13
 138:	21 f0       	breq	.+8      	; 0x142 <main+0x6e>
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	d8 16       	cp	r13, r24
 13e:	b9 f7       	brne	.-18     	; 0x12e <main+0x5a>
 140:	13 c0       	rjmp	.+38     	; 0x168 <main+0x94>
		{
			case STATE_Setup:
				CurrentLevel = 1;          // Reset current level variable
				CurrSeqPosC  = 0;          // Reset current sequence position variable

				LEDport      = 0xF0;       // All LEDs on
 142:	95 ba       	out	0x15, r9	; 21

				while (!(GetButton())) {}  // Wait until a button is pressed, store pressed button
 144:	89 b3       	in	r24, 0x19	; 25
 146:	80 95       	com	r24
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	90 70       	andi	r25, 0x00	; 0
 14e:	89 2b       	or	r24, r25
 150:	c9 f3       	breq	.-14     	; 0x144 <main+0x70>

				LEDport      = 0xFF;       // All LEDs off
 152:	85 ba       	out	0x15, r8	; 21

				SequenceBuffer[0] = CreateTimerRand(); // Create a random sequence byte from the timer value for the first sequence
 154:	0e 94 5b 00 	call	0xb6	; 0xb6 <CreateTimerRand>
 158:	98 e2       	ldi	r25, 0x28	; 40
 15a:	03 c0       	rjmp	.+6      	; 0x162 <main+0x8e>
 15c:	f7 01       	movw	r30, r14
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <main+0x8a>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 162:	91 50       	subi	r25, 0x01	; 1
 164:	d8 f7       	brcc	.-10     	; 0x15c <main+0x88>
 166:	de cf       	rjmp	.-68     	; 0x124 <main+0x50>
				Delay10MS(40);             // Wait a 400ms before continuing

				CurrentState = STATE_PlayNextSeq;
				break;
			case STATE_PlayNextSeq:
				GenerateTone(SequenceBuffer[CurrSeqPosC]);           // Turn on the tone generator
 168:	f5 01       	movw	r30, r10
 16a:	e0 0f       	add	r30, r16
 16c:	f1 1d       	adc	r31, r1
 16e:	10 81       	ld	r17, Z
 170:	81 2f       	mov	r24, r17
 172:	0e 94 41 00 	call	0x82	; 0x82 <GenerateTone>

				LEDport &= (0xF0 | ~SequenceBuffer[CurrSeqPosC]);    // Turn on sequence LED
 176:	95 b3       	in	r25, 0x15	; 21
 178:	81 2f       	mov	r24, r17
 17a:	80 95       	com	r24
 17c:	80 6f       	ori	r24, 0xF0	; 240
 17e:	89 23       	and	r24, r25
 180:	85 bb       	out	0x15, r24	; 21
 182:	24 e1       	ldi	r18, 0x14	; 20
 184:	03 c0       	rjmp	.+6      	; 0x18c <main+0xb8>
 186:	c7 01       	movw	r24, r14
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0xb4>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 18c:	21 50       	subi	r18, 0x01	; 1
 18e:	d8 f7       	brcc	.-10     	; 0x186 <main+0xb2>
			case STATE_PlayNextSeq:
				GenerateTone(SequenceBuffer[CurrSeqPosC]);           // Turn on the tone generator

				LEDport &= (0xF0 | ~SequenceBuffer[CurrSeqPosC]);    // Turn on sequence LED
				Delay10MS(20);                                       // Wait 200ms
				LEDport |= (SequenceBuffer[CurrSeqPosC]   | 0xF0);   // Turn off sequence LED
 190:	85 b3       	in	r24, 0x15	; 21
 192:	80 6f       	ori	r24, 0xF0	; 240
 194:	81 2b       	or	r24, r17
 196:	85 bb       	out	0x15, r24	; 21
 198:	24 e1       	ldi	r18, 0x14	; 20
 19a:	03 c0       	rjmp	.+6      	; 0x1a2 <main+0xce>
 19c:	c7 01       	movw	r24, r14
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <main+0xca>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	d8 f7       	brcc	.-10     	; 0x19c <main+0xc8>
				LEDport &= (0xF0 | ~SequenceBuffer[CurrSeqPosC]);    // Turn on sequence LED
				Delay10MS(20);                                       // Wait 200ms
				LEDport |= (SequenceBuffer[CurrSeqPosC]   | 0xF0);   // Turn off sequence LED
				Delay10MS(20);                                       // Wait 200ms
				
				SoundOff();                                          // Turn off the tone
 1a6:	8e b5       	in	r24, 0x2e	; 46
 1a8:	8e 7f       	andi	r24, 0xFE	; 254
 1aa:	8e bd       	out	0x2e, r24	; 46
 1ac:	95 98       	cbi	0x12, 5	; 18

				if (++CurrSeqPosC == CurrentLevel)                   // Sequence playing complete, wait for player input
 1ae:	0f 5f       	subi	r16, 0xFF	; 255
 1b0:	0c 15       	cp	r16, r12
 1b2:	d1 f6       	brne	.-76     	; 0x168 <main+0x94>
 1b4:	82 e0       	ldi	r24, 0x02	; 2
 1b6:	d8 2e       	mov	r13, r24
 1b8:	00 e0       	ldi	r16, 0x00	; 0
				{
					CurrentState = STATE_PlayNextSeq;
				}
				break;
			case STATE_WaitForPlayer:
				while (GetButton()) {};                              // Wait until all buttons released before accepting key
 1ba:	89 b3       	in	r24, 0x19	; 25
 1bc:	80 95       	com	r24
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	8f 70       	andi	r24, 0x0F	; 15
 1c2:	90 70       	andi	r25, 0x00	; 0
 1c4:	89 2b       	or	r24, r25
 1c6:	c9 f7       	brne	.-14     	; 0x1ba <main+0xe6>

    		uint8_t PressedButton = 0;

				while (!(PressedButton))                             // Wait until a button is pressed, store pressed button
					PressedButton = GetButton();
 1c8:	19 b3       	in	r17, 0x19	; 25
 1ca:	10 95       	com	r17
 1cc:	1f 70       	andi	r17, 0x0F	; 15
			case STATE_WaitForPlayer:
				while (GetButton()) {};                              // Wait until all buttons released before accepting key

    		uint8_t PressedButton = 0;

				while (!(PressedButton))                             // Wait until a button is pressed, store pressed button
 1ce:	e1 f3       	breq	.-8      	; 0x1c8 <main+0xf4>
					PressedButton = GetButton();

				GenerateTone(PressedButton);
 1d0:	81 2f       	mov	r24, r17
 1d2:	0e 94 41 00 	call	0x82	; 0x82 <GenerateTone>

				LEDport &= (~PressedButton | 0xF0);                  // Light up the pressed button's LED
 1d6:	95 b3       	in	r25, 0x15	; 21
 1d8:	81 2f       	mov	r24, r17
 1da:	80 95       	com	r24
 1dc:	80 6f       	ori	r24, 0xF0	; 240
 1de:	89 23       	and	r24, r25
 1e0:	85 bb       	out	0x15, r24	; 21
 1e2:	24 e1       	ldi	r18, 0x14	; 20
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <main+0x118>
 1e6:	c7 01       	movw	r24, r14
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <main+0x114>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 1ec:	21 50       	subi	r18, 0x01	; 1
 1ee:	d8 f7       	brcc	.-10     	; 0x1e6 <main+0x112>

				GenerateTone(PressedButton);

				LEDport &= (~PressedButton | 0xF0);                  // Light up the pressed button's LED
				Delay10MS(20);                                       // Wait 200ms
				LEDport |= (PressedButton  | 0xF0);                  // Turn off the pressed button's LED
 1f0:	85 b3       	in	r24, 0x15	; 21
 1f2:	80 6f       	ori	r24, 0xF0	; 240
 1f4:	81 2b       	or	r24, r17
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	24 e1       	ldi	r18, 0x14	; 20
 1fa:	03 c0       	rjmp	.+6      	; 0x202 <main+0x12e>
 1fc:	c7 01       	movw	r24, r14
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x12a>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 202:	21 50       	subi	r18, 0x01	; 1
 204:	d8 f7       	brcc	.-10     	; 0x1fc <main+0x128>
				LEDport &= (~PressedButton | 0xF0);                  // Light up the pressed button's LED
				Delay10MS(20);                                       // Wait 200ms
				LEDport |= (PressedButton  | 0xF0);                  // Turn off the pressed button's LED
				Delay10MS(20);                                       // Wait 200ms

				SoundOff();
 206:	8e b5       	in	r24, 0x2e	; 46
 208:	8e 7f       	andi	r24, 0xFE	; 254
 20a:	8e bd       	out	0x2e, r24	; 46
 20c:	95 98       	cbi	0x12, 5	; 18

				if (PressedButton == SequenceBuffer[CurrSeqPosC])    // Correct button pressed
 20e:	f5 01       	movw	r30, r10
 210:	e0 0f       	add	r30, r16
 212:	f1 1d       	adc	r31, r1
 214:	80 81       	ld	r24, Z
 216:	18 17       	cp	r17, r24
 218:	29 f5       	brne	.+74     	; 0x264 <main+0x190>
				{
					if (++CurrSeqPosC == CurrentLevel)                 // Sequence finished by player
 21a:	0f 5f       	subi	r16, 0xFF	; 255
 21c:	0c 15       	cp	r16, r12
 21e:	09 f0       	breq	.+2      	; 0x222 <main+0x14e>
 220:	86 cf       	rjmp	.-244    	; 0x12e <main+0x5a>
					{
						CurrentLevel++;                                  // Increase the level by one
 222:	c0 2e       	mov	r12, r16
 224:	c3 94       	inc	r12
						CurrSeqPosC = 0;                                 // Reset sequence position counter to 0

						if (CurrentLevel > BUFFERLEN)                    // A genious has completed the entire sequence
 226:	a4 e1       	ldi	r26, 0x14	; 20
 228:	ac 15       	cp	r26, r12
 22a:	f8 f0       	brcs	.+62     	; 0x26a <main+0x196>
						{
							CurrentState = STATE_WinGame;
						}
						else                                             // Still more room in the buffer, create a new random byte and set the state accordingly
						{
							SequenceBuffer[CurrentLevel - 1] = CreateTimerRand(); // Create the next sequence byte from the timer
 22c:	0e 94 5b 00 	call	0xb6	; 0xb6 <CreateTimerRand>
 230:	fe 01       	movw	r30, r28
 232:	ec 0d       	add	r30, r12
 234:	f1 1d       	adc	r31, r1
 236:	80 83       	st	Z, r24
 238:	00 e0       	ldi	r16, 0x00	; 0
 23a:	30 e0       	ldi	r19, 0x00	; 0
				}
				break;
			case STATE_CorrectSeq:
				for (uint8_t FlashCount=0; FlashCount<3; FlashCount++) // Flash the LEDs three times
				{
					LEDport = 0xF0;                                 // Turn on all the LEDs
 23c:	95 ba       	out	0x15, r9	; 21
 23e:	28 e0       	ldi	r18, 0x08	; 8
 240:	03 c0       	rjmp	.+6      	; 0x248 <main+0x174>
 242:	c7 01       	movw	r24, r14
 244:	01 97       	sbiw	r24, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x170>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	d8 f7       	brcc	.-10     	; 0x242 <main+0x16e>
			case STATE_CorrectSeq:
				for (uint8_t FlashCount=0; FlashCount<3; FlashCount++) // Flash the LEDs three times
				{
					LEDport = 0xF0;                                 // Turn on all the LEDs
					Delay10MS(8);                                   // Wait 80ms
					LEDport = 0xFF;                                 // Turn off all the LEDs
 24c:	25 bb       	out	0x15, r18	; 21
 24e:	28 e0       	ldi	r18, 0x08	; 8
 250:	03 c0       	rjmp	.+6      	; 0x258 <main+0x184>
 252:	c7 01       	movw	r24, r14
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x180>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	d8 f7       	brcc	.-10     	; 0x252 <main+0x17e>
				{
					CurrentState = STATE_LoseGame;
				}
				break;
			case STATE_CorrectSeq:
				for (uint8_t FlashCount=0; FlashCount<3; FlashCount++) // Flash the LEDs three times
 25c:	3f 5f       	subi	r19, 0xFF	; 255
 25e:	33 30       	cpi	r19, 0x03	; 3
 260:	69 f7       	brne	.-38     	; 0x23c <main+0x168>
 262:	82 cf       	rjmp	.-252    	; 0x168 <main+0x94>
				}

				CurrentState = STATE_PlayNextSeq;
				break;
			case STATE_LoseGame:
				LEDport = 0xF0;                // Turn on all LEDs
 264:	80 ef       	ldi	r24, 0xF0	; 240
 266:	85 bb       	out	0x15, r24	; 21
 268:	fe cf       	rjmp	.-4      	; 0x266 <main+0x192>
 26a:	44 ec       	ldi	r20, 0xC4	; 196
 26c:	59 e0       	ldi	r21, 0x09	; 9

				CurrentState = STATE_LoseGame;
				break;
			case STATE_WinGame:
				LEDport = (~LEDport | 0xF0);   // Invert LEDs status
 26e:	85 b3       	in	r24, 0x15	; 21
 270:	80 95       	com	r24
 272:	80 6f       	ori	r24, 0xF0	; 240
 274:	85 bb       	out	0x15, r24	; 21
 276:	24 e1       	ldi	r18, 0x14	; 20
 278:	03 c0       	rjmp	.+6      	; 0x280 <main+0x1ac>
 27a:	ca 01       	movw	r24, r20
 27c:	01 97       	sbiw	r24, 0x01	; 1
 27e:	f1 f7       	brne	.-4      	; 0x27c <main+0x1a8>
	// frequency. The maximum safe value for _delay_ms that is guaranteed to be correct for
	// any frequency up to about 20MHz (current AVR maximum) is about 10ms. Because of this,
	// I have added in this tiny function (smaller than repeating the while loop inside the
	// main code) to handle large delays. Delays are in blocks of 10ms.

	while(Num--)
 280:	21 50       	subi	r18, 0x01	; 1
 282:	d8 f7       	brcc	.-10     	; 0x27a <main+0x1a6>
 284:	f4 cf       	rjmp	.-24     	; 0x26e <main+0x19a>

00000286 <Delay10MS>:
 286:	24 ec       	ldi	r18, 0xC4	; 196
 288:	39 e0       	ldi	r19, 0x09	; 9
 28a:	04 c0       	rjmp	.+8      	; 0x294 <Delay10MS+0xe>
 28c:	f9 01       	movw	r30, r18
 28e:	31 97       	sbiw	r30, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <Delay10MS+0x8>
 292:	81 50       	subi	r24, 0x01	; 1
 294:	88 23       	and	r24, r24
 296:	d1 f7       	brne	.-12     	; 0x28c <Delay10MS+0x6>
	   _delay_ms(10);
}
 298:	08 95       	ret

0000029a <__prologue_saves__>:
 29a:	2f 92       	push	r2
 29c:	3f 92       	push	r3
 29e:	4f 92       	push	r4
 2a0:	5f 92       	push	r5
 2a2:	6f 92       	push	r6
 2a4:	7f 92       	push	r7
 2a6:	8f 92       	push	r8
 2a8:	9f 92       	push	r9
 2aa:	af 92       	push	r10
 2ac:	bf 92       	push	r11
 2ae:	cf 92       	push	r12
 2b0:	df 92       	push	r13
 2b2:	ef 92       	push	r14
 2b4:	ff 92       	push	r15
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	cd b7       	in	r28, 0x3d	; 61
 2c0:	de b7       	in	r29, 0x3e	; 62
 2c2:	ca 1b       	sub	r28, r26
 2c4:	db 0b       	sbc	r29, r27
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	f8 94       	cli
 2ca:	de bf       	out	0x3e, r29	; 62
 2cc:	0f be       	out	0x3f, r0	; 63
 2ce:	cd bf       	out	0x3d, r28	; 61
 2d0:	09 94       	ijmp

000002d2 <_exit>:
 2d2:	f8 94       	cli

000002d4 <__stop_program>:
 2d4:	ff cf       	rjmp	.-2      	; 0x2d4 <__stop_program>
