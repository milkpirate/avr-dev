
bt-snes-t10-asm-atmel-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800040  000001be  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800040  00800040  00000252  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000362  00000000  00000000  000002ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d2  00000000  00000000  0000061c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000162  00000000  00000000  000007ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001de  00000000  00000000  00000bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	11 c0       	rjmp	.+34     	; 0x24 <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	aa c0       	rjmp	.+340    	; 0x160 <__vector_5>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	98 c0       	rjmp	.+304    	; 0x142 <__vector_8>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>

00000016 <__trampolines_end>:
  16:	56 42       	sbci	r21, 0x26	; 38
  18:	4e 4d       	sbci	r20, 0xDE	; 222
  1a:	33 34       	cpi	r19, 0x43	; 67
  1c:	35 36       	cpi	r19, 0x65	; 101
  1e:	37 38       	cpi	r19, 0x87	; 135
  20:	39 30       	cpi	r19, 0x09	; 9
	...

00000024 <__ctors_end>:
  24:	11 27       	eor	r17, r17
  26:	1f bf       	out	0x3f, r17	; 63
  28:	cf e5       	ldi	r28, 0x5F	; 95
  2a:	d0 e0       	ldi	r29, 0x00	; 0
  2c:	de bf       	out	0x3e, r29	; 62
  2e:	cd bf       	out	0x3d, r28	; 61

00000030 <__do_clear_bss>:
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	a0 e4       	ldi	r26, 0x40	; 64
  34:	b0 e0       	ldi	r27, 0x00	; 0
  36:	01 c0       	rjmp	.+2      	; 0x3a <.do_clear_bss_start>

00000038 <.do_clear_bss_loop>:
  38:	1d 93       	st	X+, r17

0000003a <.do_clear_bss_start>:
  3a:	a3 34       	cpi	r26, 0x43	; 67
  3c:	b2 07       	cpc	r27, r18
  3e:	e1 f7       	brne	.-8      	; 0x38 <.do_clear_bss_loop>
  40:	16 d0       	rcall	.+44     	; 0x6e <main>
  42:	bb c0       	rjmp	.+374    	; 0x1ba <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <uart_tx>:

void uart_tx(char c)
{
	do	// wait until last outframe is sent
	{
		sei();
  46:	78 94       	sei
		nop();
  48:	00 00       	nop
		cli();
  4a:	f8 94       	cli
	}
	while (outframe);
  4c:	41 a1       	lds	r20, 0x41
  4e:	52 a1       	lds	r21, 0x42
  50:	45 2b       	or	r20, r21
  52:	c9 f7       	brne	.-14     	; 0x46 <uart_tx>

	// frame = [*P76543210S]  S=start=0, P=stop=1, *=endmark=1
	outframe = (3<<9) | (c<<1);
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	88 0f       	add	r24, r24
  58:	99 1f       	adc	r25, r25
  5a:	96 60       	ori	r25, 0x06	; 6
  5c:	92 a9       	sts	0x42, r25
  5e:	81 a9       	sts	0x41, r24

	TIMSK0 |= (1<<OCIE0A);	// turn interrupt on for sending
  60:	4b b5       	in	r20, 0x2b	; 43
  62:	42 60       	ori	r20, 0x02	; 2
  64:	4b bd       	out	0x2b, r20	; 43
	TIFR0   = (1<<OCF0A);	// as well as interrupt flag
  66:	42 e0       	ldi	r20, 0x02	; 2
  68:	4a bd       	out	0x2a, r20	; 42

	sei();	// enable global interrupts that
  6a:	78 94       	sei
  6c:	08 95       	ret

0000006e <main>:
static void init_uart(void);
static uint16_t check_12_buttons(void);

int main(void)
{
	OSCCAL = 150;		// rc oscilator callibration
  6e:	46 e9       	ldi	r20, 0x96	; 150
  70:	49 bf       	out	0x39, r20	; 57
	PORTB |=  CTRL_DAT;					// set pullups for DAT
}

void init_uart(void)
{
	uint8_t sreg = SREG;
  72:	6f b7       	in	r22, 0x3f	; 63

	cli();
  74:	f8 94       	cli

	OCR0A  = VAL_OCR;			// preset 1st overflow val
  76:	43 e5       	ldi	r20, 0x53	; 83
  78:	50 e0       	ldi	r21, 0x00	; 0
  7a:	57 bd       	out	0x27, r21	; 39
  7c:	46 bd       	out	0x26, r20	; 38

	TCCR0B  = (1<<CS00);
  7e:	41 e0       	ldi	r20, 0x01	; 1
  80:	4d bd       	out	0x2d, r20	; 45
	TIMSK0 &= ~(1<<OCIE0A);		// turn compare match interrupt off
  82:	4b b5       	in	r20, 0x2b	; 43
  84:	4d 7f       	andi	r20, 0xFD	; 253
  86:	4b bd       	out	0x2b, r20	; 43
	TIFR0   =  (1<<OCF0A);		// set compare match flag (to be on the safe side)
  88:	42 e0       	ldi	r20, 0x02	; 2
  8a:	4a bd       	out	0x2a, r20	; 42

	PORTB |= UART_TX;			// turn pullup on
  8c:	11 9a       	sbi	0x02, 1	; 2
	DDRB  |= UART_TX;			// set as output
  8e:	09 9a       	sbi	0x01, 1	; 1

	outframe = 0;
  90:	12 a9       	sts	0x42, r17
  92:	11 a9       	sts	0x41, r17
	SREG = sreg;
  94:	6f bf       	out	0x3f, r22	; 63
}

void init_ports(void)
{
	// ctrl
	DDRB  |=  CTRL_CLK | CTRL_LAT;		// set CLK, LAT output
  96:	41 b1       	in	r20, 0x01	; 1
  98:	45 60       	ori	r20, 0x05	; 5
  9a:	41 b9       	out	0x01, r20	; 1
	PORTB |=  CTRL_CLK;					// set CLK high
  9c:	12 9a       	sbi	0x02, 2	; 2
	PORTB &= ~CTRL_LAT;					// set LAT low
  9e:	10 98       	cbi	0x02, 0	; 2

	DDRB  &= ~CTRL_DAT;					// set DAT input
  a0:	09 98       	cbi	0x01, 1	; 1
	PORTB |=  CTRL_DAT;					// set pullups for DAT
  a2:	11 9a       	sbi	0x02, 1	; 2
	DDRB = ddrb;			// restore DDRB
}

void init_sleep(void)
{
	wdt_enable(WDTO_15MS);	// set wdt timeout to time_out (15ms)
  a4:	58 e0       	ldi	r21, 0x08	; 8
  a6:	48 ed       	ldi	r20, 0xD8	; 216
  a8:	0f b7       	in	r16, 0x3f	; 63
  aa:	f8 94       	cli
  ac:	a8 95       	wdr
  ae:	4c bf       	out	0x3c, r20	; 60
  b0:	51 bf       	out	0x31, r21	; 49
  b2:	0f bf       	out	0x3f, r16	; 63
	WDTCSR |= (1<<WDIE);	// interrupt instead of reset
  b4:	41 b7       	in	r20, 0x31	; 49
  b6:	40 64       	ori	r20, 0x40	; 64
  b8:	41 bf       	out	0x31, r20	; 49
	sei();					// enable global interrupts
  ba:	78 94       	sei
uint16_t check_12_buttons(void)
{
	uint16_t read_buttons = 0;

	// latch in
	PORTB |=  CTRL_LAT;	// high
  bc:	10 9a       	sbi	0x02, 0	; 2
	PORTB &= ~CTRL_LAT;	// low
  be:	10 98       	cbi	0x02, 0	; 2
  c0:	4c e0       	ldi	r20, 0x0C	; 12
	flags &= ~SENT;
}

uint16_t check_12_buttons(void)
{
	uint16_t read_buttons = 0;
  c2:	c0 e0       	ldi	r28, 0x00	; 0
  c4:	d0 e0       	ldi	r29, 0x00	; 0
	PORTB |=  CTRL_LAT;	// high
	PORTB &= ~CTRL_LAT;	// low

	uint8_t i = 11;
	do{
		read_buttons <<= 1;
  c6:	cc 0f       	add	r28, r28
  c8:	dd 1f       	adc	r29, r29

		// inverse logic
		if (!(PINB & CTRL_DAT)) read_buttons |= 1;
  ca:	01 9b       	sbis	0x00, 1	; 0
  cc:	c1 60       	ori	r28, 0x01	; 1

		// clock line
		PORTB &= ~CTRL_CLK;	// low
  ce:	12 98       	cbi	0x02, 2	; 2
		PORTB |=  CTRL_CLK;	// high
  d0:	12 9a       	sbi	0x02, 2	; 2
  d2:	41 50       	subi	r20, 0x01	; 1
	} while (i--);
  d4:	c1 f7       	brne	.-16     	; 0xc6 <main+0x58>
	
    while(1)
    {
		uint16_t read_btns = check_12_buttons();	// get button status	0b111111111111;	//0b101100101111; //

		if(read_btns)
  d6:	c1 17       	cp	r28, r17
  d8:	d1 07       	cpc	r29, r17
  da:	f9 f0       	breq	.+62     	; 0x11a <main+0xac>
		{
			uart_tx(START_FLAG);		// start transmission
  dc:	82 e1       	ldi	r24, 0x12	; 18
  de:	b3 df       	rcall	.-154    	; 0x46 <uart_tx>
	}
}

void uart_tx_buttons(uint16_t read_buttons)
{
	uint8_t i = 11;
  e0:	3b e0       	ldi	r19, 0x0B	; 11
	do
	{
		if(read_buttons & 1)
  e2:	c0 ff       	sbrs	r28, 0
  e4:	11 c0       	rjmp	.+34     	; 0x108 <main+0x9a>
		{
			if(flags & SENT)	uart_tx(',');
  e6:	40 a1       	lds	r20, 0x40
  e8:	40 ff       	sbrs	r20, 0
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <main+0x84>
  ec:	8c e2       	ldi	r24, 0x2C	; 44
  ee:	ab df       	rcall	.-170    	; 0x46 <uart_tx>
  f0:	03 c0       	rjmp	.+6      	; 0xf8 <main+0x8a>
			else				flags |= SENT;
  f2:	40 a1       	lds	r20, 0x40
  f4:	41 60       	ori	r20, 0x01	; 1
  f6:	40 a9       	sts	0x40, r20

			uart_tx(pgm_read_byte(&button_let[i]));
  f8:	83 2f       	mov	r24, r19
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	e8 2f       	mov	r30, r24
  fe:	f9 2f       	mov	r31, r25
 100:	ea 5e       	subi	r30, 0xEA	; 234
 102:	ff 4b       	sbci	r31, 0xBF	; 191
 104:	80 81       	ld	r24, Z
 106:	9f df       	rcall	.-194    	; 0x46 <uart_tx>
		}
		read_buttons >>= 1;
 108:	d6 95       	lsr	r29
 10a:	c7 95       	ror	r28
	} while (i--);
 10c:	31 50       	subi	r19, 0x01	; 1
 10e:	48 f7       	brcc	.-46     	; 0xe2 <main+0x74>

	flags &= ~SENT;
 110:	40 a1       	lds	r20, 0x40
 112:	4e 7f       	andi	r20, 0xFE	; 254
 114:	40 a9       	sts	0x40, r20

		if(read_btns)
		{
			uart_tx(START_FLAG);		// start transmission
			uart_tx_buttons(read_btns);	// send buttons
			uart_tx(ACK);				// terminate transmission
 116:	83 e1       	ldi	r24, 0x13	; 19
 118:	96 df       	rcall	.-212    	; 0x46 <uart_tx>
}


void sleep(uint8_t mode)
{
	while(outframe);		// wait for transmission
 11a:	41 a1       	lds	r20, 0x41
 11c:	52 a1       	lds	r21, 0x42
 11e:	45 2b       	or	r20, r21
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0xac>

	uint8_t ddrb = DDRB;	// backup actual DRRB
 122:	41 b1       	in	r20, 0x01	; 1
	DDRB = 0;				// set all to input, saves power
 124:	11 b9       	out	0x01, r17	; 1

	set_sleep_mode(mode);	// set sleep mode
 126:	5a b7       	in	r21, 0x3a	; 58
 128:	51 7f       	andi	r21, 0xF1	; 241
 12a:	54 60       	ori	r21, 0x04	; 4
 12c:	5a bf       	out	0x3a, r21	; 58
	sleep_enable();			// enable sleep mode
 12e:	5a b7       	in	r21, 0x3a	; 58
 130:	51 60       	ori	r21, 0x01	; 1
 132:	5a bf       	out	0x3a, r21	; 58
	sei();					// enable global interrupts to wake up
 134:	78 94       	sei
	sleep_cpu();			// halt cpu
 136:	88 95       	sleep
	// --------------------	// we wake up here again (wdt ISR)
	sleep_disable();		// disable sleep
 138:	5a b7       	in	r21, 0x3a	; 58
 13a:	5e 7f       	andi	r21, 0xFE	; 254
 13c:	5a bf       	out	0x3a, r21	; 58

	DDRB = ddrb;			// restore DDRB
 13e:	41 b9       	out	0x01, r20	; 1
 140:	bd cf       	rjmp	.-134    	; 0xbc <main+0x4e>

00000142 <__vector_8>:
	sei();	// enable global interrupts that
			// the transmission gets triggered
}

ISR(WDT_vect)				// wake up again
{
 142:	1f 93       	push	r17
 144:	0f 93       	push	r16
 146:	0f b7       	in	r16, 0x3f	; 63
 148:	0f 93       	push	r16
 14a:	10 e0       	ldi	r17, 0x00	; 0
 14c:	4f 93       	push	r20
	WDTCSR |= (1<<WDIE);	// re-set interrupt bit
 14e:	41 b7       	in	r20, 0x31	; 49
 150:	40 64       	ori	r20, 0x40	; 64
 152:	41 bf       	out	0x31, r20	; 49
							// otherwise we would reset
							// the mcu next overflow
}
 154:	4f 91       	pop	r20
 156:	0f 91       	pop	r16
 158:	0f bf       	out	0x3f, r16	; 63
 15a:	0f 91       	pop	r16
 15c:	1f 91       	pop	r17
 15e:	18 95       	reti

00000160 <__vector_5>:

ISR(TIM0_COMPA_vect)	// uart interrupt
{
 160:	1f 93       	push	r17
 162:	0f 93       	push	r16
 164:	0f b7       	in	r16, 0x3f	; 63
 166:	0f 93       	push	r16
 168:	10 e0       	ldi	r17, 0x00	; 0
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
	uint8_t	 sreg	= SREG;
 174:	8f b7       	in	r24, 0x3f	; 63
	uint16_t data	= outframe;					// copy outframe
 176:	41 a1       	lds	r20, 0x41
 178:	52 a1       	lds	r21, 0x42

	OCR0A		   += VAL_OCR;					// set next overflow target
 17a:	66 b5       	in	r22, 0x26	; 38
 17c:	77 b5       	in	r23, 0x27	; 39
 17e:	6d 5a       	subi	r22, 0xAD	; 173
 180:	7f 4f       	sbci	r23, 0xFF	; 255
 182:	77 bd       	out	0x27, r23	; 39
 184:	66 bd       	out	0x26, r22	; 38

	if(data & 1)	PORTB |=  UART_TX;			// write bit to port
 186:	40 ff       	sbrs	r20, 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <__vector_5+0x2e>
 18a:	11 9a       	sbi	0x02, 1	; 2
 18c:	01 c0       	rjmp	.+2      	; 0x190 <__vector_5+0x30>
	else			PORTB &= ~UART_TX;
 18e:	11 98       	cbi	0x02, 1	; 2

	if(1 == data)   TIMSK0 &= ~(1<<OCIE0A);		// if we're done with transmission
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	51 07       	cpc	r21, r17
 194:	19 f4       	brne	.+6      	; 0x19c <__vector_5+0x3c>
 196:	6b b5       	in	r22, 0x2b	; 43
 198:	6d 7f       	andi	r22, 0xFD	; 253
 19a:	6b bd       	out	0x2b, r22	; 43
												// disable compm. interrput

	outframe = data >> 1;						// shift data and write it back to outframe
 19c:	56 95       	lsr	r21
 19e:	47 95       	ror	r20
 1a0:	52 a9       	sts	0x42, r21
 1a2:	41 a9       	sts	0x41, r20
	SREG = sreg;
 1a4:	8f bf       	out	0x3f, r24	; 63
 1a6:	8f 91       	pop	r24
 1a8:	7f 91       	pop	r23
 1aa:	6f 91       	pop	r22
 1ac:	5f 91       	pop	r21
 1ae:	4f 91       	pop	r20
 1b0:	0f 91       	pop	r16
 1b2:	0f bf       	out	0x3f, r16	; 63
 1b4:	0f 91       	pop	r16
 1b6:	1f 91       	pop	r17
 1b8:	18 95       	reti

000001ba <_exit>:
 1ba:	f8 94       	cli

000001bc <__stop_program>:
 1bc:	ff cf       	rjmp	.-2      	; 0x1bc <__stop_program>
